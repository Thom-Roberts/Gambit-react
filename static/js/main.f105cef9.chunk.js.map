{"version":3,"sources":["services/BUNGIECRED.js","services/Games.js","services/ProfileRequest.js","App.js","serviceWorker.js","index.js","services/SendRequest.js"],"names":["module","exports","BUNGIEAPIKEY","BUNGIEROOTPATH","GETACTIVITYHISTORYURL","membershipId","platformId","characterId","concat","GETPGCRURL","instanceid","send","require","SendRequest","_callee","membershipType","characterIds","activityHistory","activityInstanceIds","gamePromises","games","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","gameGroup","temp","D_Projects_gambit_react_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","map","charId","GetActivityHistory","Promise","all","sent","charActivites","Response","activities","activity","activityDetails","instanceId","character","undefined","Symbol","iterator","done","value","push","game","t0","return","finish","abrupt","t1","Error","stop","_callee2","_context2","__webpack_exports__","GetGames","SEARCHPLAYERURL","name","replace","GETPROFILEURL","GETHISTORICALSTATSURL","MembershipData","this","memberData","memberObject","historicalStats","regenerator_default","GetMembershipData","GetProfile","GetHistoricalStats","characters","stats","characterStats","allPvECompetitive","hasOwnProperty","allTime","console","error","data","_callee3","prof","_context3","profile","_callee4","_context4","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","username","handleChange","bind","assertThisInitialized","handleSubmit","handleManifestClick","event","setState","target","_this2","preventDefault","_x","_main","apply","arguments","main","then","response","log","catch","reason","alert","_this3","react_default","createElement","onSubmit","type","onChange","onClick","length","key","index","id","keys","basic","displayValue","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","__webpack_require__","r","d","request","url","resolve","reject","options","headers","X-Api-Key","get","err","res","body","statusCode","JSON","parse","Message"],"mappings":"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","file":"static/js/main.f105cef9.chunk.js","sourcesContent":["var exports = module.exports = {};\r\n\r\n//exports.BUNGIEAPIKEY = 'fc470e42da39445380152053f1a86267'; // development\r\nexports.BUNGIEAPIKEY = '7771c372dbe34060a7bbb10b3016ecfe'; // production\r\n\r\n","const BUNGIEROOTPATH = 'https://www.bungie.net/Platform/';\r\n\r\nconst GETACTIVITYHISTORYURL = (membershipId, platformId, characterId) => {return `/Destiny2/${platformId}/Account/${membershipId}/Character/${characterId}/Stats/Activities/?mode=64`}\r\nconst GETPGCRURL = instanceid => {return `/Destiny2/Stats/PostGameCarnageReport/${instanceid}/`};\r\n\r\nconst send = require('./SendRequest').SendRequest;\r\n\r\nasync function GetGames(membershipId, membershipType, characterIds) {\r\n\ttry {\r\n\t\tlet activityHistory = characterIds.map(charId => {\r\n\t\t\treturn GetActivityHistory(membershipId, membershipType, charId);\r\n\t\t});\r\n\r\n\t\tactivityHistory = await Promise.all(activityHistory);\r\n\r\n\t\tlet activityInstanceIds = activityHistory.map(charActivites => {\r\n\t\t\treturn charActivites.Response.activities.map(activity => {\r\n\t\t\t\treturn activity.activityDetails.instanceId;\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tlet gamePromises = activityInstanceIds.map(character => {\r\n\t\t\treturn character.map(instanceId => {\r\n\t\t\t\treturn GetPostGameReport(instanceId);\r\n\t\t\t});\r\n\t\t});;\r\n\r\n\t\tlet games = [];\r\n\r\n\t\tfor(let gameGroup of gamePromises) {\r\n\t\t\tlet temp = await Promise.all(gameGroup);\r\n\t\t\tgames.push(temp.map(game => {\r\n\t\t\t\treturn game.Response;\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn games;\r\n\t}\r\n\tcatch(e) {\r\n\t\tthrow new Error(`Failed to acquire games: ${e}`);\r\n\t}\r\n}\r\n\r\nasync function GetActivityHistory(membershipId, membershipType, characterId) {\r\n\treturn send(BUNGIEROOTPATH + GETACTIVITYHISTORYURL(membershipId, membershipType, characterId));\r\n}\r\n\r\n\r\nfunction GetPostGameReport(instanceid) {\r\n\treturn send(BUNGIEROOTPATH + GETPGCRURL(instanceid));\r\n}\r\n\r\nexport default {\r\n\tGetGames\r\n}","import { SendRequest } from './SendRequest';\r\nconst BUNGIEROOTPATH = 'https://www.bungie.net/Platform/';\r\nconst SEARCHPLAYERURL = (name) => {return `/Destiny2/SearchDestinyPlayer/-1/${name.replace('#', '%23')}/`};\r\nconst GETPROFILEURL = (membershipId, platformId) => {return `/Destiny2/${platformId}/Profile/${membershipId}/?components=100`};\r\nconst GETHISTORICALSTATSURL = (membershipId, platformId, characterId) => {return `/Destiny2/${platformId}/Account/${membershipId}/Character/${characterId}/Stats/?modes=64`;};\r\n\r\nconst gameRequests = require('./Games');\r\nconst manifestRequests = require('./Manifest');\r\n\r\n\r\nfunction MembershipData(membershipId, membershipType) {\r\n\tthis.membershipId = membershipId;\r\n\tthis.membershipType = membershipType;\r\n}\r\n\r\nexport async function main(name) {\r\n\ttry {\r\n\t\tlet memberData = await GetMembershipData(name);\r\n\t\tlet memberObject = new MembershipData(memberData.membershipId, memberData.membershipType);\r\n\r\n\t\t// Array of character ids\r\n\t\tlet characterIds = await GetProfile(memberObject.membershipId, memberObject.membershipType);\r\n\r\n\t\t// TODO: We can probably delay Promise.all'ing this until the last moment, since\r\n\t\t// we shouldn't need to manipulate this at all\r\n\t\t// Maybe if we need to fetch the hash ids from the database\r\n\r\n\t\tlet historicalStats = characterIds.map(charId => {\r\n\t\t\treturn GetHistoricalStats(memberObject.membershipId, memberObject.membershipType, charId);\r\n\t\t});\r\n\r\n\t\thistoricalStats = await Promise.all(historicalStats);\r\n\r\n\t\t//let games = await gameRequests.GetGames(memberObject.membershipId, memberObject.membershipType, characterIds);\r\n\r\n\t\t// Now have a collection of games here\r\n\r\n\t\tmemberObject.characters = characterIds;\r\n\r\n\t\tmemberObject.stats = historicalStats.map(characterStats => {\r\n\t\t\tif(characterStats.Response.allPvECompetitive.hasOwnProperty('allTime')) {\r\n\t\t\t\treturn characterStats.Response.allPvECompetitive.allTime;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {};\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn memberObject;\r\n\t}\r\n\tcatch(e) {\r\n\t\tconsole.error(e);\r\n\t\tthrow e;\r\n\t}\r\n}\r\n\r\nasync function GetMembershipData(name) {\r\n\ttry {\r\n\t\tlet data = await SendRequest(BUNGIEROOTPATH + SEARCHPLAYERURL(name));\r\n\t\t\r\n\t\treturn {\r\n\t\t\t'membershipId': data.Response[0].membershipId,\r\n\t\t\t'membershipType': data.Response[0].membershipType\r\n\t\t};\r\n\t}\r\n\tcatch(e) {\r\n\t\tthrow new Error(`Could not fetch membership data: ${e}`);\r\n\t}\r\n}\r\n\r\nasync function GetProfile(membershipId, platformId) {\r\n\ttry {\r\n\t\tlet prof = await SendRequest(BUNGIEROOTPATH + GETPROFILEURL(membershipId, platformId));\r\n\t\treturn prof.Response.profile.data.characterIds;\r\n\t}\r\n\tcatch(e) {\r\n\t\tthrow new Error(`Could not fetch profile: ${e}`);\r\n\t}\r\n}\r\n\r\nasync function GetHistoricalStats(membershipId, membershipType, characterId) {\r\n\ttry {\r\n\t\treturn SendRequest(BUNGIEROOTPATH + GETHISTORICALSTATSURL(membershipId, membershipType, characterId));\r\n\t}\r\n\tcatch(e) {\r\n\t\tthrow new Error(`Could not get historical stats: ${e}`);\r\n\t}\r\n}\r\n\r\n//main('Warrior342');\r\n\r\n","import React from 'react';\r\nimport { main } from './services/ProfileRequest';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      'username': '',\r\n      'membershipId': '',\r\n      'membershipType': '',\r\n      'characters': [],\r\n      'historicalStats': [],\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleManifestClick = this.handleManifestClick.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({'username': event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    let prom = main(this.state.username);\r\n\r\n    prom.then(response => {\r\n      this.setState({\r\n        'membershipId': response.membershipId,\r\n        'membershipType': response.membershipType,\r\n        'characters': response.characters,\r\n        'historicalStats': response.stats,\r\n      }, () => console.log(response)); // REMOVE this after debugging\r\n    }).catch(reason => {\r\n      alert(`Failed with response: ${reason}`);\r\n    });\r\n  }\r\n\r\n  handleManifestClick(event) {\r\n    event.preventDefault();\r\n\r\n    alert('clicked button');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\r\n          <button type=\"submit\">Send name</button>\r\n        </form>\r\n\r\n        <button onClick={this.handleManifestClick}>Get Manifest</button>\r\n\r\n        <div>\r\n          Membership id: <span>{this.state.membershipId}</span>\r\n        </div>\r\n\r\n        <div>\r\n          Membership type: <span>{this.state.membershipType}</span>\r\n        </div>\r\n\r\n        {this.state.characters.length > 0 &&\r\n          <ul>\r\n            {this.state.characters.map(character => {\r\n              return <li key={character}>\r\n                  {character}\r\n                </li>\r\n            })}\r\n          </ul>\r\n        }\r\n\r\n        {this.state.historicalStats.length > 0 &&\r\n          <div>\r\n            {this.state.historicalStats.map((characterStats, index) => {\r\n              return <ul key={this.state.characters[index].id}>\r\n                {Object.keys(characterStats).map(key => {\r\n                  return <li>\r\n                    {key}: {characterStats[key].basic.displayValue}\r\n                  </li>\r\n                })}\r\n\r\n              </ul>\r\n            })}\r\n          </div>\r\n        }\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const request = require('request');\r\nconst BUNGIEAPIKEY = require('./BUNGIECRED').BUNGIEAPIKEY;\r\n\r\nexport function SendRequest(url) {\r\n   return new Promise((resolve, reject) => {\r\n      const options = {\r\n         'url': url,\r\n         'headers': {\r\n            'X-Api-Key': BUNGIEAPIKEY,\r\n         },\r\n      };\r\n\r\n      request.get(options, (err, res, body) => {\r\n         if(err) {\r\n            reject(err);\r\n         }\r\n\t\t\tif(res.statusCode !== 200) {\r\n\t\t\t\tconsole.error(res.body);\r\n            reject(`Request failed: ${res.statusCode}: ${JSON.parse(body).Message}`);\r\n         }\r\n\r\n         resolve(JSON.parse(body));\r\n      });\r\n   });\r\n}"],"sourceRoot":""}
{"version":3,"sources":["services/BUNGIECRED.js","services/Games.js","services/ProfileRequest.js","App.js","serviceWorker.js","index.js","services/SendRequest.js"],"names":["module","exports","BUNGIEAPIKEY","BUNGIEROOTPATH","GETACTIVITYHISTORYURL","membershipId","platformId","characterId","concat","GETPGCRURL","instanceid","send","require","SendRequest","_callee","membershipType","characterIds","activityHistory","activityInstanceIds","gamePromises","games","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","gameGroup","temp","_Users_Thomas_Projects_gambit_react_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","map","charId","GetActivityHistory","Promise","all","sent","charActivites","Response","activities","activity","activityDetails","instanceId","character","undefined","Symbol","iterator","done","value","push","game","t0","return","finish","abrupt","t1","Error","stop","_callee2","_context2","__webpack_exports__","GetGames","SEARCHPLAYERURL","name","GETPROFILEURL","GETHISTORICALSTATSURL","MembershipData","this","memberData","memberObject","historicalStats","regenerator_default","GetMembershipData","GetProfile","GetHistoricalStats","characters","stats","characterStats","allPvECompetitive","allTime","console","error","data","_callee3","prof","_context3","profile","_callee4","_context4","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","username","handleChange","bind","assertThisInitialized","handleSubmit","handleManifestClick","event","setState","target","_this2","preventDefault","_x","_main","apply","arguments","main","then","response","catch","reason","alert","_this3","react_default","createElement","onSubmit","type","onChange","onClick","length","key","id","index","keys","basic","displayValue","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","__webpack_require__","r","d","request","url","resolve","reject","options","headers","X-Api-Key","get","err","res","body","statusCode","JSON","parse"],"mappings":"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","file":"static/js/main.af516ae5.chunk.js","sourcesContent":["var exports = module.exports = {};\n\nexports.BUNGIEAPIKEY = '7771c372dbe34060a7bbb10b3016ecfe';\n\n","const BUNGIEROOTPATH = 'https://www.bungie.net/Platform/';\n\nconst GETACTIVITYHISTORYURL = (membershipId, platformId, characterId) => {return `/Destiny2/${platformId}/Account/${membershipId}/Character/${characterId}/Stats/Activities/?mode=64`}\nconst GETPGCRURL = instanceid => {return `/Destiny2/Stats/PostGameCarnageReport/${instanceid}/`};\n\nconst send = require('./SendRequest').SendRequest;\n\nasync function GetGames(membershipId, membershipType, characterIds) {\n\ttry {\n\t\tlet activityHistory = characterIds.map(charId => {\n\t\t\treturn GetActivityHistory(membershipId, membershipType, charId);\n\t\t});\n\n\t\tactivityHistory = await Promise.all(activityHistory);\n\n\t\tlet activityInstanceIds = activityHistory.map(charActivites => {\n\t\t\treturn charActivites.Response.activities.map(activity => {\n\t\t\t\treturn activity.activityDetails.instanceId;\n\t\t\t});\n\t\t});\n\n\t\tlet gamePromises = activityInstanceIds.map(character => {\n\t\t\treturn character.map(instanceId => {\n\t\t\t\treturn GetPostGameReport(instanceId);\n\t\t\t});\n\t\t});;\n\n\t\tlet games = [];\n\n\t\tfor(let gameGroup of gamePromises) {\n\t\t\tlet temp = await Promise.all(gameGroup);\n\t\t\tgames.push(temp.map(game => {\n\t\t\t\treturn game.Response;\n\t\t\t}));\n\t\t}\n\n\t\treturn games;\n\t}\n\tcatch(e) {\n\t\tthrow new Error(`Failed to acquire games: ${e}`);\n\t}\n}\n\nasync function GetActivityHistory(membershipId, membershipType, characterId) {\n\treturn send(BUNGIEROOTPATH + GETACTIVITYHISTORYURL(membershipId, membershipType, characterId));\n}\n\n\nfunction GetPostGameReport(instanceid) {\n\treturn send(BUNGIEROOTPATH + GETPGCRURL(instanceid));\n}\n\nexport default {\n\tGetGames\n}","import { SendRequest } from './SendRequest';\nconst BUNGIEROOTPATH = 'https://www.bungie.net/Platform/';\nconst SEARCHPLAYERURL = (name) => {return `/Destiny2/SearchDestinyPlayer/-1/${name}/`};\nconst GETPROFILEURL = (membershipId, platformId) => {return `/Destiny2/${platformId}/Profile/${membershipId}/?components=100`};\nconst GETHISTORICALSTATSURL = (membershipId, platformId, characterId) => {return `/Destiny2/${platformId}/Account/${membershipId}/Character/${characterId}/Stats/?modes=64`;};\n\nconst gameRequests = require('./Games');\nconst manifestRequests = require('./Manifest');\n\n\nfunction MembershipData(membershipId, membershipType) {\n\tthis.membershipId = membershipId;\n\tthis.membershipType = membershipType;\n}\n\nexport async function main(name) {\n\ttry {\n\t\tlet memberData = await GetMembershipData(name);\n\t\tlet memberObject = new MembershipData(memberData.membershipId, memberData.membershipType);\n\n\t\t// Array of character ids\n\t\tlet characterIds = await GetProfile(memberObject.membershipId, memberObject.membershipType);\n\n\t\t// TODO: We can probably delay Promise.all'ing this until the last moment, since\n\t\t// we shouldn't need to manipulate this at all\n\t\t// Maybe if we need to fetch the hash ids from the database\n\n\t\tlet historicalStats = characterIds.map(charId => {\n\t\t\treturn GetHistoricalStats(memberObject.membershipId, memberObject.membershipType, charId);\n\t\t});\n\n\t\thistoricalStats = await Promise.all(historicalStats);\n\n\t\t//let games = await gameRequests.GetGames(memberObject.membershipId, memberObject.membershipType, characterIds);\n\n\t\t// Now have a collection of games here\n\n\t\tmemberObject.characters = characterIds;\n\n\t\tmemberObject.stats = historicalStats.map(characterStats => {\n\t\t\treturn characterStats.Response.allPvECompetitive.allTime;\n\t\t});\n\n\t\treturn memberObject;\n\t}\n\tcatch(e) {\n\t\tconsole.error(e);\n\t\tthrow e;\n\t}\n}\n\nasync function GetMembershipData(name) {\n\ttry {\n\t\tlet data = await SendRequest(BUNGIEROOTPATH + SEARCHPLAYERURL(name));\n\t\treturn {\n\t\t\t'membershipId': data.Response[0].membershipId,\n\t\t\t'membershipType': data.Response[0].membershipType\n\t\t};\n\t}\n\tcatch(e) {\n\t\tthrow new Error(`Could not fetch membership data: ${e}`);\n\t}\n}\n\nasync function GetProfile(membershipId, platformId) {\n\ttry {\n\t\tlet prof = await SendRequest(BUNGIEROOTPATH + GETPROFILEURL(membershipId, platformId));\n\t\treturn prof.Response.profile.data.characterIds;\n\t}\n\tcatch(e) {\n\t\tthrow new Error(`Could not fetch profile: ${e}`);\n\t}\n}\n\nasync function GetHistoricalStats(membershipId, membershipType, characterId) {\n\ttry {\n\t\treturn SendRequest(BUNGIEROOTPATH + GETHISTORICALSTATSURL(membershipId, membershipType, characterId));\n\t}\n\tcatch(e) {\n\t\tthrow new Error(`Could not get historical stats: ${e}`);\n\t}\n}\n\n//main('Warrior342');\n\n","import React from 'react';\nimport { main } from './services/ProfileRequest';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      'username': '',\n      'membershipId': '',\n      'membershipType': '',\n      'characters': [],\n      'historicalStats': [],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleManifestClick = this.handleManifestClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({'username': event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let prom = main(this.state.username);\n  \n    prom.then(response => {\n      this.setState({\n        'membershipId': response.membershipId,\n        'membershipType': response.membershipType,\n        'characters': response.characters,\n        'historicalStats': response.stats,\n      });\n    }).catch(reason => {\n      alert(`Failed with response: ${reason}`);\n    });\n  }\n\n  handleManifestClick(event) {\n    event.preventDefault();\n\n    alert('clicked button');\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n          <button type=\"submit\">Send name</button>\n        </form>\n\n        <button onClick={this.handleManifestClick}>Get Manifest</button>\n\n        <div>\n          Membership id: <span>{this.state.membershipId}</span>\n        </div>\n\n        <div>\n          Membership type: <span>{this.state.membershipType}</span>\n        </div>\n\n        {this.state.characters.length > 0 &&\n          <ul>\n            {this.state.characters.map(character => {\n              return <li key={character.id}>\n                  {character.id}\n                </li>\n            })}\n          </ul>\n        }\n\n        {this.state.historicalStats.length > 0 && \n          <div>\n            {this.state.historicalStats.map((characterStats, index) => {\n              return <ul key={this.state.characters[index].id}>\n                {Object.keys(characterStats).map(key => {\n                  return <li>\n                    {key}: {characterStats[key].basic.displayValue}\n                  </li>\n                })}\n\n              </ul>\n            })}\n          </div>\n        }\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const request = require('request');\nconst BUNGIEAPIKEY = require('./BUNGIECRED').BUNGIEAPIKEY;\n\nexport function SendRequest(url) {\n   return new Promise((resolve, reject) => {\n      const options = {\n         'url': url,\n         'headers': {\n            'X-Api-Key': BUNGIEAPIKEY,\n         },\n      };\n\n      request.get(options, (err, res, body) => {\n         if(err) {\n            reject(err);\n         }\n\t\t\tif(res.statusCode !== 200) {\n            reject(`Could not resolve connection in time`);\n         }\n\n         resolve(JSON.parse(body));\n      });\n   });\n}"],"sourceRoot":""}
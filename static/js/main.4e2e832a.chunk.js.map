{"version":3,"sources":["services/ProfileRequest.js","services/Games.js","services/BUNGIECRED.js","App.js","serviceWorker.js","index.js","services/SendRequest.js"],"names":["BUNGIEROOTPATH","SEARCHPLAYERURL","name","concat","GETPROFILEURL","membershipId","platformId","GETHISTORICALSTATSURL","characterId","send","require","SendRequest","MembershipData","membershipType","this","_callee","memberData","memberObject","characterIds","historicalStats","_Users_Thomas_Projects_gambit_react_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","GetMembershipData","sent","GetProfile","map","charId","GetHistoricalStats","Promise","all","characters","stats","characterStats","Response","allPvECompetitive","allTime","abrupt","t0","console","error","stop","_callee2","data","_context2","Error","_callee3","prof","_context3","profile","_callee4","_context4","module","exports","main","GETACTIVITYHISTORYURL","GETPGCRURL","instanceid","activityHistory","activityInstanceIds","gamePromises","games","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","gameGroup","temp","GetActivityHistory","charActivites","activities","activity","activityDetails","instanceId","character","undefined","Symbol","iterator","done","value","push","game","return","finish","t1","GetGames","BUNGIEAPIKEY","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","username","handleChange","bind","assertThisInitialized","handleSubmit","handleManifestClick","event","setState","target","_this2","preventDefault","then","response","catch","reason","alert","_this3","react_default","createElement","onSubmit","type","onChange","onClick","length","key","id","index","keys","basic","displayValue","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","request","url","resolve","reject","options","headers","X-Api-Key","get","err","res","body","statusCode","JSON","parse"],"mappings":"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","file":"static/js/main.4e2e832a.chunk.js","sourcesContent":["const BUNGIEROOTPATH = 'https://www.bungie.net/Platform/';\nconst SEARCHPLAYERURL = (name) => {return `/Destiny2/SearchDestinyPlayer/-1/${name}/`};\nconst GETPROFILEURL = (membershipId, platformId) => {return `/Destiny2/${platformId}/Profile/${membershipId}/?components=100`};\nconst GETHISTORICALSTATSURL = (membershipId, platformId, characterId) => {return `/Destiny2/${platformId}/Account/${membershipId}/Character/${characterId}/Stats/?modes=64`;};\n\nconst gameRequests = require('./Games');\nconst manifestRequests = require('./Manifest');\nconst send = require('./SendRequest').SendRequest;\n\nfunction MembershipData(membershipId, membershipType) {\n\tthis.membershipId = membershipId;\n\tthis.membershipType = membershipType;\n}\n\nasync function main(name) {\n\ttry {\n\t\tlet memberData = await GetMembershipData(name);\n\t\tlet memberObject = new MembershipData(memberData.membershipId, memberData.membershipType);\n\n\t\t// Array of character ids\n\t\tlet characterIds = await GetProfile(memberObject.membershipId, memberObject.membershipType);\n\n\t\t// TODO: We can probably delay Promise.all'ing this until the last moment, since\n\t\t// we shouldn't need to manipulate this at all\n\t\t// Maybe if we need to fetch the hash ids from the database\n\n\t\tlet historicalStats = characterIds.map(charId => {\n\t\t\treturn GetHistoricalStats(memberObject.membershipId, memberObject.membershipType, charId);\n\t\t});\n\n\t\thistoricalStats = await Promise.all(historicalStats);\n\n\t\t//let games = await gameRequests.GetGames(memberObject.membershipId, memberObject.membershipType, characterIds);\n\n\t\t// Now have a collection of games here\n\n\t\tmemberObject.characters = characterIds;\n\n\t\tmemberObject.stats = historicalStats.map(characterStats => {\n\t\t\treturn characterStats.Response.allPvECompetitive.allTime;\n\t\t});\n\n\t\treturn memberObject;\n\t}\n\tcatch(e) {\n\t\tconsole.error(e);\n\t\tthrow e;\n\t}\n}\n\nasync function GetMembershipData(name) {\n\ttry {\n\t\tlet data = await send(BUNGIEROOTPATH + SEARCHPLAYERURL(name));\n\t\treturn {\n\t\t\t'membershipId': data.Response[0].membershipId,\n\t\t\t'membershipType': data.Response[0].membershipType\n\t\t};\n\t}\n\tcatch(e) {\n\t\tthrow new Error(`Could not fetch membership data: ${e}`);\n\t}\n}\n\nasync function GetProfile(membershipId, platformId) {\n\ttry {\n\t\tlet prof = await send(BUNGIEROOTPATH + GETPROFILEURL(membershipId, platformId));\n\t\treturn prof.Response.profile.data.characterIds;\n\t}\n\tcatch(e) {\n\t\tthrow new Error(`Could not fetch profile: ${e}`);\n\t}\n}\n\nasync function GetHistoricalStats(membershipId, membershipType, characterId) {\n\ttry {\n\t\treturn send(BUNGIEROOTPATH + GETHISTORICALSTATSURL(membershipId, membershipType, characterId));\n\t}\n\tcatch(e) {\n\t\tthrow new Error(`Could not get historical stats: ${e}`);\n\t}\n}\n\nmodule.exports = {\n\tmain\n};\n\n//main('Warrior342');\n\n","const BUNGIEROOTPATH = 'https://www.bungie.net/Platform/';\n\nconst GETACTIVITYHISTORYURL = (membershipId, platformId, characterId) => {return `/Destiny2/${platformId}/Account/${membershipId}/Character/${characterId}/Stats/Activities/?mode=64`}\nconst GETPGCRURL = instanceid => {return `/Destiny2/Stats/PostGameCarnageReport/${instanceid}/`};\n\nconst send = require('./SendRequest').SendRequest;\n\nasync function GetGames(membershipId, membershipType, characterIds) {\n\ttry {\n\t\tlet activityHistory = characterIds.map(charId => {\n\t\t\treturn GetActivityHistory(membershipId, membershipType, charId);\n\t\t});\n\n\t\tactivityHistory = await Promise.all(activityHistory);\n\n\t\tlet activityInstanceIds = activityHistory.map(charActivites => {\n\t\t\treturn charActivites.Response.activities.map(activity => {\n\t\t\t\treturn activity.activityDetails.instanceId;\n\t\t\t});\n\t\t});\n\n\t\tlet gamePromises = activityInstanceIds.map(character => {\n\t\t\treturn character.map(instanceId => {\n\t\t\t\treturn GetPostGameReport(instanceId);\n\t\t\t});\n\t\t});;\n\n\t\tlet games = [];\n\n\t\tfor(let gameGroup of gamePromises) {\n\t\t\tlet temp = await Promise.all(gameGroup);\n\t\t\tgames.push(temp.map(game => {\n\t\t\t\treturn game.Response;\n\t\t\t}));\n\t\t}\n\n\t\treturn games;\n\t}\n\tcatch(e) {\n\t\tthrow new Error(`Failed to acquire games: ${e}`);\n\t}\n}\n\nasync function GetActivityHistory(membershipId, membershipType, characterId) {\n\treturn send(BUNGIEROOTPATH + GETACTIVITYHISTORYURL(membershipId, membershipType, characterId));\n}\n\n\nfunction GetPostGameReport(instanceid) {\n\treturn send(BUNGIEROOTPATH + GETPGCRURL(instanceid));\n}\n\nmodule.exports = {\n\tGetGames,\n};","var exports = module.exports = {};\n\nexports.BUNGIEAPIKEY = '7771c372dbe34060a7bbb10b3016ecfe';\n\n","import React from 'react';\n// import { main } from './services/ProfileRequest';\nconst main = require('./services/ProfileRequest').main;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      'username': '',\n      'membershipId': '',\n      'membershipType': '',\n      'characters': [],\n      'historicalStats': [],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleManifestClick = this.handleManifestClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({'username': event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let prom = main(this.state.username);\n  \n    prom.then(response => {\n      this.setState({\n        'membershipId': response.membershipId,\n        'membershipType': response.membershipType,\n        'characters': response.characters,\n        'historicalStats': response.stats,\n      });\n    }).catch(reason => {\n      alert(`Failed with response: ${reason}`);\n    });\n  }\n\n  handleManifestClick(event) {\n    event.preventDefault();\n\n    alert('clicked button');\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n          <button type=\"submit\">Send name</button>\n        </form>\n\n        <button onClick={this.handleManifestClick}>Get Manifest</button>\n\n        <div>\n          Membership id: <span>{this.state.membershipId}</span>\n        </div>\n\n        <div>\n          Membership type: <span>{this.state.membershipType}</span>\n        </div>\n\n        {this.state.characters.length > 0 &&\n          <ul>\n            {this.state.characters.map(character => {\n              return <li key={character.id}>\n                  {character.id}\n                </li>\n            })}\n          </ul>\n        }\n\n        {this.state.historicalStats.length > 0 && \n          <div>\n            {this.state.historicalStats.map((characterStats, index) => {\n              return <ul key={this.state.characters[index].id}>\n                {Object.keys(characterStats).map(key => {\n                  return <li>\n                    {key}: {characterStats[key].basic.displayValue}\n                  </li>\n                })}\n\n              </ul>\n            })}\n          </div>\n        }\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const request = require('request');\nconst BUNGIEAPIKEY = require('./BUNGIECRED').BUNGIEAPIKEY;\n\nfunction SendRequest(url) {\n   return new Promise((resolve, reject) => {\n      const options = {\n         'url': url,\n         'headers': {\n            'X-Api-Key': BUNGIEAPIKEY,\n         },\n      };\n\n      request.get(options, (err, res, body) => {\n         if(err) {\n            reject(err);\n         }\n\t\t\tif(res.statusCode !== 200) {\n            reject(`Could not resolve connection in time`);\n         }\n\n         resolve(JSON.parse(body));\n      });\n   });\n}\n\n\n\nmodule.exports = {\n   SendRequest,\n};"],"sourceRoot":""}